from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import padding

def load_private_key_from_file(private_key_filename):
    with open(private_key_filename, 'rb') as key_file:
        private_key = serialization.load_pem_private_key(
            key_file.read(),
            password=None,  # No password for this example
            backend=default_backend()
        )
    return private_key

def decrypt_file(encrypted_file, decrypted_file, private_key):
    with open(encrypted_file, 'rb') as file:
        ciphertext = file.read()

    decrypted_data = private_key.decrypt(
        ciphertext,
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    )

    with open(decrypted_file, 'wb') as file:
        file.write(decrypted_data)

def main():
    encrypted_file = input("Enter the name of the encrypted file: ")
    decrypted_file = input("Enter the name of the file to save the decrypted content: ")
    private_key_file = input("Enter the name of the file containing the private key: ")

    private_key = load_private_key_from_file(private_key_file)

    decrypt_file(encrypted_file, decrypted_file, private_key)

    print("Decryption complete. Decrypted content saved to", decrypted_file)

if __name__ == "__main__":
    main()
